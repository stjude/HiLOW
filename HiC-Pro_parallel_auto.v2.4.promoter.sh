#/bin/bash

#===============
# A all-in-one pipeline which takes input the
# fastq directory as required by HiC-pro and perform mapping,
# filtering, merging, normalizing, converting HiC-Pro results
# to .hic files, call 1D ChIP peaks and 2D loops,
# with related json for visulization in ProteinPaint.
#
# author: Jie Lu
# Abraham Lab
# Department of Computational Biology
# St. Jude Childrenâ€™s Research Hospital
#===============

#===============
# sample execution command for this script:
# bash HiC-Pro_parallel_auto.v1.1.sh -i InputDir -o OutDir -c HiC-Pro_ConfigFile
#===============


usage(){

 echo -e "usage : bash HiC-Pro_parallel_auto.sh -i InputDir -o OutDir [-c ConfigFile] [-f flag] [-n CPU_step1] [-g Gsize] [-j JuicerJar] [-p ProteinPaintPath] [-R refGenome] [-r Restrition] [-l LowDistThr] [-u UppDistThr] [-I IntType] [-t LoopThr] [-h]"
 echo -e "Use option -h for more information"

}


help(){
    usage;
    cat << EOF
    Options:
        -i  InputDir            InputDir as requrest for HiC-Pro input, the input directory is in the format of WD/SampleID, the fastq file are orgnised as WD/SampleID/fastq/*.{fq,fastq,fastq.gz}
        -d  ScriptDir           directory for all HiChIP pipeline scripts, default to be "/research_jude/rgs01_jude/groups/abrahgrp/projects/Baker_DIPG_CRC/common/HiChIP_pipeline/script". External user should change this to their own installation directory
        -o  OutDir              user specified directory for all output of pipeline
        -c  ConfigFile          Configuration file for HiChIP/Hi-C processing
        -f  Flag                HiC data flag, the default data type is HiChIP
        -n  CPU_step1           Number of CPUs used per mapping job in HiC-Pro step 1. (total CPUs needed = Number of CPU per job * Number of parallel jobs)
        -g  Gsize               genome size file used during HiC-Pro processing
        -j  JuicerJar           path to juicer_tools.jar file, used to convert HiC-Pro ressult to .hic file
        -p  ProteinPaintPath    path to store files for visulization using ProteinPaint
        -R  refGenome           Reference genome string used for displaying track in UCSC. Default is 'hs19' for human chromosome. For mouse, specify 'mm10' or 'mm9'
        -r  RestrictionF        Absolute path of restriction fragment file used by HiC-Pro and HiChIP-Peaks.
        -l  LowDistThr          Lower distance threshold of interaction between two intervals (CIS). Default: 5000 (indicates 5Kb). Interactions below this distance threshold will not be considered for statistical significance.
        -u  UppDistThr          Upper distance threshold of interaction between two intervals (CIS). Default: 4000000 (indicates 4Mb). Interactions above  this distance threshold will not be considered for statistical significance.
        -I  IntType             Type of interaction (foreground) reported by FitHiChIP.1) peak to peak; 2) peak 2 non peak; 3) peak to all (default); 4) all to all; 5) everything from 1 to 4
        -t  LoopThr             A list of FDR threshold used to calling loops using FitHiChIP, provide in the format of "0.01 0.05 0.1".
        -M  FDR                 FDR used to call 1D peaks by HiChIP peaks
        -L  ReadLength          Length of reads for the HiC-pro generated reads. Default 75 *** (for potential furthur usage)
        -a  loopAnchor          Optional file containing pre-defined set of loop anchors, only the first 3 cols are relevent (Chr,Start,End). 1D peak calling step will skipped if provided.
        -P  Promoter            Optional file containing pre-defined set of promoters(4kb regions around TSS), in the format of chr,start,end,TranscriptID|GeneID. LoopAnchor will be generated by merging 1D HiChIP peak with top 2/3 promoters by HiChIP coverage.
        -s  Slop                Increase the Valid Pair entry by the same number base pairs in each direction,Default=50, meaning 100bp for both paired read.
        -b  BlackList           Optional file containing a list of region need to be filtered out on the level of allValidPairs. With each of the paired reads being set to be 2*Slop (-s), pairs would be filtered out if either read overlap 1bp with any black listed regions.
EOF
exit
}

function fail {
    printf '%s\n' "$1" >&2  ## Send message to stderr. Exclude >&2 if you don't want it that way.
    exit "${2-1}"  ## Return a code specified by $2 or 1 by default.
}

if [ $# -lt 1 ]
 then
     usage
     exit
fi

#==============
# default parameters
#=============

InputDir=''
ScriptDir='/research_jude/rgs01_jude/groups/abrahgrp/projects/Baker_DIPG_CRC/common/HiChIP_pipeline/script/coreScript'
OutputDir=''
ConfigFile='/research_jude/rgs01_jude/groups/abrahgrp/projects/Baker_DIPG_CRC/common/HiChIP_pipeline/test/config_AA.HiChIP.mm10.txt'
HiC=0
loopAnchor=""
Promoter=""
Slop=50
BlackList="/research_jude/rgs01_jude/groups/abrahgrp/projects/Baker_DIPG_CRC/common/Jie/Generalizable_Code_v2/ref/ENCFF547MET.bed"
CPU_step1=4
Gsize='/research_jude/rgs01_jude/groups/abrahgrp/projects/Baker_DIPG_CRC/common/Jie/ref/mm10.chromosome_lengths.txt'
#Gsize=/research_jude/rgs01_jude/reference/public/genomes/Homo_sapiens/GRCh37-lite/hg19.v2.size
JuicerJar=/research_jude/rgs01_jude/groups/abrahgrp/projects/Baker_DIPG_CRC/common/HicPro2juicebox/juicer_tools_1.22.01.jar
ProteinPaintPath="/research_jude/rgs01_jude/resgen/legacy/gb_customTracks/tp/abrahgrp/jlu"
refGenome='mm10'
#refGenome='hs19'
RestrictionF='/research_jude/rgs01_jude/groups/abrahgrp/projects/Baker_DIPG_CRC/common/Jie/ref/mm10_dpnii.bed'
#RestrictionF='/hpcf/authorized_apps/rhel7_apps/hic-pro/install/HiC-Pro_2.11.1/annotation/hg19_MboI_resfrag.bed'
LowDistThr=5000
UppDistThr=20000000
IntType=3
HiCProBasedir=""
FDR=0.4
ReadLength=75
LoopThr="0.01,0.05,0.1"
#==============

 while getopts ":i:d:o:c:fn:g:j:p:R:r:l:u:I:t:M:L:a:P:s:b:h" opt;
 do
     case "$opt" in
        i) InputDir=$OPTARG;;
        d) ScriptDir=$OPTARG;;
        o) OutDir=$OPTARG;;
        c) ConfigFile=$OPTARG;;
        f) HiC=1;;
        n) CPU_step1=$OPTARG;;
        g) Gsize=$OPTARG;;
        j) JuicerJar=$OPTARG;;
        p) ProteinPaintPath=$OPTARG;;
        R) refGenome=$OPTARG;;
        r) RestrictionF=$OPTARG;;
        l) LowDistThr=$OPTARG;;
        u) UppDistThr=$OPTARG;;
        I) IntType=$OPTARG;;
        t) LoopThr=$OPTARG;;
        M) FDR=$OPTARG;;
        L) ReadLength=$OPTARG;;
        a) loopAnchor=$OPTARG;;
        P) Promoter=$OPTARG;;
        s) Slop=$OPTARG;;
        b) BlackList=$OPTARG;;
        h) help ;;
        \?) usage
             echo "error: unrecognized option -$OPTARG";
             exit 1
             ;;
        :)
         echo "Option -$OPTARG requires an argument." >&2
         usage
         exit 1
         ;;
     esac
 done


if [[ -z $InputDir || -z $OutDir || -z $ConfigFile || -z $HiC || -z $CPU_step1 || -z $Gsize || -z $JuicerJar || -z $ProteinPaintPath || -z $refGenome || -z $RestrictionF || -z $LowDistThr || -z $UppDistThr || -z $IntType || -z $LoopThr || -z $FDR || -z $Slop  ]]; then
    echo "missing required parameters!!"
    usage
    exit
fi

## Detect SampleID
SampleID=$(basename $InputDir)

## Define directory for 1)orignal fastq, 2) main results 3)splitted fastq as input for HiC-Pro, 4) HiC-Pro output and 5) .hic files

FastqOriginalDir=$InputDir/fastq
FastqSplitDir=$OutDir/${SampleID}_split/fastq
HiCProOut=$OutDir/HiCPro_out
HicOut=$OutDir/HicFile
### name PeakOut and LoopOut folders based on parameters used in 1D peak calling, added by Jie 03/26/2021
PeakCutoff=$FDR
PeakOut=$OutDir/PeakOut.$PeakCutoff
if [ ! $loopAnchor ];then
    if [ ! $Promoter ];then
        LoopOut_FitHiChIP=$OutDir/LoopOut_FitHiChIP.$IntType.$PeakCutoff.$LowDistThr.$UppDistThr
    else
        Prom=$(basename $Promoter)
        Prom=${Prom%.bed}
        LoopOut_FitHiChIP=$OutDir/LoopOut_FitHiChIP.$IntType.$PeakCutoff.$Prom.$LowDistThr.$UppDistThr
    fi
else
    Anchor=$(basename $loopAnchor)
    Anchor=${Anchor%.bed}
    LoopOut_FitHiChIP=$OutDir/LoopOut_FitHiChIP.$IntType.$PeakCutoff.$Anchor.$LowDistThr.$UppDistThr
fi
mkdir -p $OutDir

## Display input parameters
echo -e "script: ${0}"
echo -e "parameters: ${@}"
echo -e "################Input papameters#####################"
echo -e "InputDir:$InputDir"
echo -e "ScriptDir:$ScriptDir"
echo -e "OutDir:$OutDir"
echo -e "SampleID: $SampleID"
echo -e "CPU_step1: $CPU_step1"
echo -e "HiC-Pro ConfigFile: $ConfigFile"
echo -e "HiC data flag: $HiC"
echo -e "FastqOriginalDir: $FastqOriginalDir"
echo -e "FastqSplitDir: $FastqSplitDir"
echo -e "Geome size file: $Gsize"
echo -e "Path to Juicer_tools: $JuicerJar"
echo -e "HiC-Pro OutDir: $HiCProOut"
echo -e ".hic files OutDir: $HicOut"
echo -e "FDR for calling HiChIP Peaks: $FDR"
echo -e "1D peak  OutDir: $PeakOut"
echo -e "loops OutDir by FitHiChIP: $LoopOut_FitHiChIP"
echo -e "refGenome: $refGenome"
echo -e "Restriction Fragments file: $RestrictionF"
echo -e "LowDistThr for loops: $LowDistThr"
echo -e "UppDistThr for loops: $UppDistThr"
echo -e "IntType for loops: $IntType"
echo -e "loopAnchor: $loopAnchor"
echo -e "Promoter: $Promoter"
echo -e "FDR thresholds for calling loops using FitHiChIP: $LoopThr"
echo -e "Slop size to incease in both direction of reads of valid pairs: $Slop"
echo -e "file caontaining list of regions need to be filtered out: $BlackList\n"

#Load HiC-Pro module on server

module load hic-pro/3.1.0-rhel8 2> /dev/null
module load ucsc/051223
module load python/2.7.13
#module load python/2.7.15-rhel7
cd $OutDir
#==============
# split fastq files into chunks for running HiC-Pro in parallel mode
#=============

###### split both R1 and R2 fastq file in to chunks containing 10M reads (-n) , and store the spliited files in a new location (-r). Each pair of 10M fastq chunks (R1 and R2) will be mapped and filtered in a single job in parallel mode in downsteam HiC-Pro processing.
##### use for loop to spit R1 and R2 fastq in parellel for improved efficeincy.

#check if directory for spitted fastq is empty
echo -e "$(date)"
echo "################Split fastq into Chunks######################"
if [ ! -d $FastqSplitDir ] || [ ! "$(ls -A  $FastqSplitDir)" ]
then
    files=($(ls $FastqOriginalDir/*.f*q*))

    echo "Detecting ${#files[@]} fastq files to be splitted: ${files[@]}"

    jobname_array=()

    for ((i=0;i<${#files[@]};i++));
    do

        jobname=split.$SampleID.R$(( $i+1 ))

        echo "submiting R$(( $i+1 )) fastq to be splitted: ${files[$i]}"

        bsub -P "3DSE_split" -J $jobname -R "rusage[mem=2.5GB]" -N  "$ScriptDir/split_reads.py -r $FastqSplitDir -n 10000000 ${files[$i]}"

        jobname_array+=("$jobname")

        sleep 1

    done

    echo "JobNames for splitting fastq files: ${jobname_array[@]}"

    start_time="$(date -u +%s.%N)"

    # pauses and waits for the specified jobs (fastq spliting process) to finish before the command returns.

    #echo "Pause and wait for fastq splitting jobs ${jobname_array[0]} and ${jobname_array[1]} to be done......"

    #instead of expecting 2 splitting jobs, R1 and R2, now the script will monitor any number of splitting jobs, the fowllowing process  will wait untill all spliting jobs are finished
    #modified by Jie 09/14/2020

    cmd=$(echo ${jobname_array[@]}|python $ScriptDir/add_prifix_sufix.py)

    echo "Pause and wait for fastq splitting jobs to be done $cmd ..."

    bwait -w "$cmd" || fail "jobs of splitting fastq failed !"

    #bwait -w "done(${jobname_array[0]}) && done(${jobname_array[1]})"

    end_time="$(date -u +%s.%N)"

    elapsed="$(bc <<<"$end_time-$start_time")"

    echo -e "Total of $elapsed seconds elapsed for process of splitting fastq files\n"
else
    echo -e "Detecting splitted fastq files at location: $FastqSplitDir. Skipping step of fastq spliting ...\n"
fi

#==============
# generating batch scprit for running HiC-Pro in parallel mode
#=============

echo -e "$(date)"
echo "################Runing HiC-Pro in parallel modes######################"
echo "HiC-Pro input directory: $(dirname $FastqSplitDir)"

# define script name for step 1 and step 2 HiC-Pro script

script1=HiCPro_step1_$SampleID.sh
script2=HiCPro_step2_$SampleID.sh

if [ ! -f $HiCProOut/$script1 ] || [ ! -f $HiCProOut/$script2 ]

then

    echo -e "generating step1 and step2 HiC-Pro batch script: $script1 and $script2\n"

    HiC-Pro -i $(dirname $FastqSplitDir) -o $HiCProOut -c $ConfigFile -p
    echo
    cd $HiCProOut

    # generating step1 HiC-Pro batch script


    cat > $script1 <<EOF
#!/bin/bash
#BSUB -M 2.5G
#BSUB -N
#BSUB -P 3DSE
#BSUB -n $CPU_step1
EOF

    grep 'HiCpro_s1' HiCPro_step1_.sh |head -n -1 >> $script1
    echo >>$script1
    grep '^FASTQFILE\|^make' HiCPro_step1_.sh >> $script1

    # generating step2 script

    cat > $script2 <<EOF
#!/bin/bash
#BSUB -M 100G
#BSUB -N
#BSUB -P 3DSE
EOF

    grep 'HiCpro_s2' HiCPro_step2_.sh  >> $script2
    echo >> $script2
    grep '^make' HiCPro_step2_.sh >> $script2

    # rm HiCPro_step1_.sh HiCPro_step2_.sh

else

    cd $HiCProOut
    echo -e "Detecting step1 and step2 HiC-Pro batch script exist: $script1 and $script2. Skipping ...\n"

fi

#==============
# submitting HiC-Pro batch scprits step1 and step2
#=============

#submitting step 1 script
if [ ! -s $HiCProOut/logs/fastq/mapped_2hic_fragments.log ]
then
    echo -e "$(date)"
    echo "################Performing HiC-Pro step 1: mapping and filtering######################"
    echo -e "Submitting  step1 HiC-Pro batch script: $script1"

    jobid1=$(bsub < $script1 | awk '/is submitted/{print substr($2, 2, length($2)-2);}')

    start_time="$(date -u +%s.%N)"

    # pauses and waits for the step1 job (mapping and filtering) to finish.

    echo "Pause and wait for step 1 job $script1 with jobid $jobid1 to be done......"

    bwait -w "done($jobid1)" || fail "job of HiCPro Step1 failed! check format and completeness of fastq data!"

    end_time="$(date -u +%s.%N)"

    elapsed="$(bc <<<"$end_time-$start_time")"

    echo -e "Total of $elapsed seconds elapsed for step 1 job $script1 with jobid $jobid1\n"
else
    echo -e "Detecting HiC-Pro step1 result: $HiCProOut/logs/fastq/mapped_2hic_fragments.log. Skipping step1 ...\n"
fi

if [ ! -s $HiCProOut/logs/fastq/plot_hic_contacts.Rout ]
then
    echo -e "$(date)"
    echo "################Performing HiC-Pro step 2: merging and normalization######################"
    echo -e "Submitting  step2 HiC-Pro batch script: $script2"

    jobid2=$(bsub < $script2 | awk '/is submitted/{print substr($2, 2, length($2)-2);}')

    start_time="$(date -u +%s.%N)"

    # pauses and waits for the step2 job (merging and normalization to finish).

    echo "Pause and wait for step 2 job $script2 with jobid $jobid2 to be done......"

    bwait -w "done($jobid2)" || fail "job of HiCPro Step2 failed! check if memony usage exceed limit!"

    end_time="$(date -u +%s.%N)"

    elapsed="$(bc <<<"$end_time-$start_time")"

    echo -e "Total of $elapsed seconds elapsed for step 2 job $script2 with jobid $jobid2\n"

else
    echo -e "Detecting HiC-Pro step2 result: $HiCProOut/logs/fastq/plot_hic_contacts.Rout. Skipping step2...\n"
fi

#==============
# Optional step to filter fastq.allValidPaires based on BlackList regions
#=============


if [ $BlackList ]
then
    echo -e "$(date)"
    echo "################Filtering allValidPairs based on Black List regions######################"
    if [ ! -s $HiCProOut/hic_results/data/fastq/fastq.AVP.removed ]
    then
        AllValidPairs=$HiCProOut/hic_results/data/fastq/fastq.allValidPairs
        OrigValidPairs=$HiCProOut/hic_results/data/fastq/fastq.AVP.Orig
        mv $AllValidPairs $OrigValidPairs

        cd $HiCProOut/hic_results/data/fastq
        script_filter=FilterValidPairs_$SampleID.sh
        echo -e "generating batch script $script_filter to filter ValidPairs at $HiCProOut/hic_results/data/fastq"

        cat > $script_filter <<EOF
#!/bin/bash
#BSUB -M 70G
#BSUB -N
#BSUB -P 3DSE
#BSUB -q compbio
#BSUB -n 1
#BSUB -J $SampleID.filterValidPairs
#BSUB -eo $HiCProOut/hic_results/data/fastq/$SampleID.filter.e
#BSUB -oo $HiCProOut/hic_results/data/fastq/$SampleID.filter.o

module load python/2.7.15-rhel7 bedtools/2.30.0

cd $HiCProOut/hic_results/data/fastq

if [ ! -s left.bed ]
then
    awk -F "\t" -v OFS="\t" '{print \$2,\$3,\$3,\$1}' $OrigValidPairs|slopBed -i stdin -b $Slop -g $Gsize|intersectBed -a stdin -b $BlackList -u >left.bed
fi

if [ ! -s right.bed ]
then
    awk -F "\t" -v OFS="\t" '{print \$5,\$6,\$6,\$1}' $OrigValidPairs|slopBed -i stdin -b $Slop -g $Gsize|intersectBed -a stdin -b $BlackList -u >right.bed
fi

cat <(cut -f 4 left.bed) <(cut -f 4 right.bed)|sort -u > filter.pair

python $ScriptDir/FilterPairs.py -f $OrigValidPairs -b filter.pair
EOF
        echo -e "Submitting allValidpair filtering batch script: $script_filer ..."

        start_time="$(date -u +%s.%N)"

        jobidFilter=$(bsub < $script_filter | awk '/is submitted/{print substr($2, 2, length($2)-2);}')


        # pauses and waits for the job (validPairs filtering) to finish.

        echo -e "Pause and wait for job $script_filter with jobid $jobidFilter to be done ..."

        bwait -t 6000 -w "done($jobidFilter)" || fail "job of filtering ValidPairs failed! check if memony usage exceed limit!"

        end_time="$(date -u +%s.%N)"

        elapsed="$(bc <<<"$end_time-$start_time")"

        echo -e "Job of filtering allValidPairs finished.."
        echo -e "Total of $elapsed seconds elapsed for allValidPair filtering job $script_filter with jobid $jobidFilter"
    else
        echo -e "Detecting fastq.AVP.removed already exists at :  $HiCProOut/hic_results/data/fastq. Skipping ..."
    fi
    all=`wc -l $HiCProOut/hic_results/data/fastq/fastq.AVP.Orig|cut -d " " -f 1`
    filtered=`wc -l $HiCProOut/hic_results/data/fastq/fastq.AVP.removed|cut -d " " -f 1`
    percentage=`echo "$filtered/$all*100"|bc -l`
    echo -e "$filtered read pairs are filtered out from a total of $all, accounting for ${percentage} %\n"
else
    echo -e "No black list file provied. Will not perform filtering on fastq.allValidPairs."
fi



#==============
# convert HiC-Pro result to .hic file
#=============

AllValidPairs=$HiCProOut/hic_results/data/fastq/fastq.allValidPairs

echo -e "$(date)"
echo "################Converting HiC-Pro results to .hic files######################"

if [ ! -d $HicOut ] || [ ! -s $HicOut/fastq.allValidPairs.hic ]

then
    # Create directory for storing generated .hic files
    mkdir -p $HicOut
    cd $HicOut
    script_toHic=HiCProToHic_$SampleID.sh

    echo -e "generating batch script $script_toHic to gnenerate .hic files at $HicOut"

    # generating batch script for convererting allValidPairs to .hic

    cat > $script_toHic <<EOF
#!/bin/bash
#BSUB -M 70G
#BSUB -N
#BSUB -P 3DSE
#BSUB -q compbio
#BSUB -n 4
#BSUB -J $SampleID.toHic
#BSUB -eo $HicOut/$SampleID.toHic.e
#BSUB -oo $HicOut/$SampleID.toHic.o

module load hic-pro/3.1.0-rhel8 java/1.8.0_66

cd $HiCProOut
bash $ScriptDir/hicpro2juicebox.sh -i  $AllValidPairs -g $Gsize -j $JuicerJar -o $HicOut

EOF

    echo -e "Submitting .hic converting batch script: $script_toHic ..."

    start_time="$(date -u +%s.%N)"

    jobidToHic=$(bsub < $script_toHic | awk '/is submitted/{print substr($2, 2, length($2)-2);}')


    # pauses and waits for the job (converting to .hic) to finish.

    echo -e "Pause and wait for job $script_toHic with jobid $jobidToHic to be done ..."

    bwait -t 6000 -w "done($jobidToHic)" || fail "job of converting HiCPro result to .hic file failed! check if memony usage exceed limit!"

    end_time="$(date -u +%s.%N)"

    elapsed="$(bc <<<"$end_time-$start_time")"

    echo -e ".hic converting Job finished.."
    echo -e "Total of $elapsed seconds elapsed for .hic converting job $script_toHic with jobid $jobidToHic\n"
    if [ ! -s $ProteinPaintPath/$SampleID.$refGenome.hic ]
    then
    # creat soft link of .hic file and copy it to specified location for visualization by ProteinPaint
        cd $HicOut
        if [ ! -h $SampleID.$refGenome.hic ]
        then
            ln -s $HicOut/fastq.allValidPairs.hic $SampleID.$refGenome.hic
        fi
        cp  $SampleID.$refGenome.hic  $ProteinPaintPath
        echo -e "contact map for $SampleID is stored at $ProteinPaintPath/$SampleID.$refGenome.hic"
    else
        echo -e "Detecting file for ProteinPaint is ready at: $ProteinPaintPath. Skipping ... \n"
    fi
else
    echo -e "Detecting .hic result directory already exists: $HicOut. Skipping ... \n"

fi

#============
# Only perform 1D peak calling and loop calling for HiChIP data
#============
if [ $HiC -eq 0 ]

then

#==============
# Generate ChIP Coverage track and Call 1D peaks from  HiC-Pro result using HiChIP-Peaks
#=============

echo -e "$(date)"
echo "################Generating coverage track and calling 1D ChIP peaks from HiC-Pro result using HiChIP-Peaks######################"

if [ ! -d $PeakOut ] || [ ! -s $PeakOut/fastqbedgraph.bdg ] || [ ! -s $PeakOut/fastqbedgraph.bw ]
then
    # Create directory for storing generated coverage track and 1D Peak files
    mkdir -p $PeakOut
    cd $PeakOut
    script_toPeak=HiCProToPeak_$SampleID.sh
    echo -e "generating batch script $script_toPeak to calculate read coverage and call 1D peaks at $PeakOut"
    # generating batch script for calculatring coverage and calling peaks using HiChIP-Peaks
    cat > $script_toPeak <<EOF
#!/bin/bash
#BSUB -M 25G
#BSUB -P 3DSE
#BSUB -N
#BSUB -n 4
#BSUB -q compbio
#BSUB -J $SampleID.toPeak
#BSUB -eo $PeakOut/$SampleID.toPeak.e
#BSUB -oo $PeakOut/$SampleID.toPeak.o

module load conda3/202105
source activate HiC-Pro_v3.1.0
peak_call -i $HiCProOut/hic_results/data/fastq -o $PeakOut -r $RestrictionF -f $FDR -a $Gsize
conda deactivate

cd $PeakOut

LC_COLLATE=C sort -k1,1 -k2,2n fastqbedgraph.bdg > fastqbedgraph.sorted.bdg
module load ucsc/051223
bedGraphToBigWig fastqbedgraph.sorted.bdg $Gsize fastqbedgraph.bw

ln -s fastqbedgraph.bw $SampleID.$refGenome.bw

echo 'track type=bigWig name="'$SampleID'" description="'$SampleID'"  visibility=full  autoscale=on color=0,0,0  db="'$refGenome'" bigDataUrl=http://sjm5vlpgenomeb01.stjude.org/customTracks/abrahgrp/Jie/HiChIP/'$SampleID.$refGenome.bw > $SampleID.track
EOF

    echo -e "Submitting 1D peak calling  batch script: $script_toPeak ..."

    start_time="$(date -u +%s.%N)"

    jobidToPeak=$(bsub < $script_toPeak | awk '/is submitted/{print substr($2, 2, length($2)-2);}')


    # pauses and waits for the job (calling 1D peaks) to finish.

    echo -e "Pause and wait for job $script_toPeak with jobid $jobidToPeak to be done ..."

    bwait -w "done($jobidToPeak)" || fail "job of calling 1D Peaks from HiCPro result failed! check if memony usage exceed limit!"

    end_time="$(date -u +%s.%N)"

    elapsed="$(bc <<<"$end_time-$start_time")"

    echo -e "1D peak calling Job finished.."
    echo -e "Total of $elapsed seconds elapsed for 1D peak calling job $script_toPeak with jobid $jobidToPeak\n"

    if [ ! -s $ProteinPaintPath/$SampleID.bw ]
    then
        # copy coverage signal file (.bw) to specified location for visualization by ProteinPaint
        cd $PeakOut
        cp $SampleID.$refGenome.bw $ProteinPaintPath
        echo -e "coverage signal for $SampleID is store at $ProteinPaintPath/$SampleID.$refGenome.bw"
    else
        echo -e "Detecting file $SampleID.bw for ProteinPaint is ready at: $ProteinPaintPath. Skipping ... \n"
    fi
else
    echo -e "Detecting 1D peak result directory already exists: $PeakOut. Skipping ... \n"

fi

#=============
# Generate predefined Loop Anchors (merging HiChIP peaks and active promoters) used for  FitHiChIP
#=============
if [ ! $loopAnchor ] && [ $Promoter ];then
    cd $PeakOut
    echo -e "$(date)"
    echo "################Generating predefined Loop Anchors (merging HiChIP peaks and active promoters) used for FitHiChIP######################"
    echo -e "Submitting 1D peak calling  batch script: $script_toPeak ..."

    start_time="$(date -u +%s.%N)"

    jobidToLoopAnchor=$(bsub -P "3DSE" -J PeaksPromMerge -R "rusage[mem=100GB]" -n 8 -N -oo PeaksPromMerge.o -eo PeaksPromMerge.e "bash $ScriptDir/MergePeaksAndPromoters.sh $Promoter $HiCProOut/hic_results/data/fastq $PeakOut" | awk '/is submitted/{print substr($2, 2, length($2)-2);}')


    # pauses and waits for the job (generating loopAnchor) to finish.

    echo -e "Pause and wait for job (generating loopAnchor) $jobidToPeak to be done ..."

    bwait -w "done($jobidToLoopAnchor)" || fail "job of generating loopAnchor failed! check if memony usage exceed limit!"

    end_time="$(date -u +%s.%N)"

    elapsed="$(bc <<<"$end_time-$start_time")"

    echo -e "Generating loopAnchor by merging HiChIP peaks and active promoters finished.."
    echo -e "Total of $elapsed seconds elapsed for generating loopAnchor job MergePeaksAndPromoters.sh with jobid $jobidToLoopAnchor\n"
fi


#=============
# Call 2D loops from  HiC-Pro result using FitHiChIP
#=============

echo -e "$(date)"
echo "################Calling 2D loops from HiC-Pro result using FitHiChIP######################"

if [ ! -d $LoopOut_FitHiChIP ] || [ ! -s $LoopOut_FitHiChIP/Summary_results_FitHiChIP.html ]
then
    # Create directory for storing generated 2D loops files
    mkdir -p $LoopOut_FitHiChIP
    cd $LoopOut_FitHiChIP
    if  [ ! $loopAnchor ];then
        if [ ! $Promoter ];then
            # Use HiChIP-Peaks defined 1D peaks as loop anchors only if pre-defined loop anchors are not provided
            PeakFile=$PeakOut/fastqpeaks.bed
        else
            PeakFile=$(find $PeakOut/*.HiChIPPeak.combined.loopAnchor.bed -type f -exec echo {} \;)
        fi
    else
        PeakFile=$loopAnchor
    fi
    config=config_$SampleID.txt

    ## Generate  track file for candiddate anchor set used by ProteinPaint
    bash $ScriptDir/Bed2ProteinPaint.sh $PeakFile bed Anchor ${SampleID}.$(basename PeakFile).Anchor > /dev/null 2>&1
    echo -e "generating config file $config for runing FitHiChIP at $LoopOut_FitHiChIP"

    cat > $config <<EOF

#====================================
# Configuration file for running FitHiChIP
#====================================

#*****************************
# important parameters
#*****************************

# File containing the valid pairs from HiCPro pipeline
# Can be either a text file, or a gzipped text file
ValidPairs=$HiCProOut/hic_results/data/fastq/fastq.allValidPairs

# File containing the bin intervals (according to a specified bin size)
# which is an output of HiC-pro pipeline
# If not provided, this is computed from the parameter 1

#Interval==$HiCProOut/hic_results/matrix/fastq/raw/5000/fastq_5000_abs.bed

# File storing the contact matrix (output of HiC-pro pipeline)
# should be accompanied with the parameter 2
# if not specified, computed from the parameter 1

#Matrix=$HiCProOut/hic_results/matrix/fastq/raw/5000/fastq_5000.matrix

# Pre-computed locus pair file
# of the format:
# chr1  start1  end1    chr2    start2  end2    contactcounts
Bed=


# File containing reference ChIP-seq / HiChIP peaks (in .bed format)
# mandatory parameter

#PeakFile=$PeakOut/MACS2_ExtSize/out_macs2_peaks.narrowPeak
PeakFile=$PeakFile

# Output base directory under which all results will be stored
OutDir=$LoopOut_FitHiChIP

#Interaction type - 1: peak to peak 2: peak to non peak 3: peak to all (default) 4: all to all 5: everything from 1 to 4.
IntType=$IntType

# Size of the bins [default = 5000], in bases, for detecting the interactions.
BINSIZE=5000

# Lower distance threshold of interaction between two segments
# (default = 20000 or 20 Kb)
LowDistThr=$LowDistThr

# Upper distance threshold of interaction between two segments
# (default = 2000000 or 2 Mb)
UppDistThr=$UppDistThr

# Applicable only for peak to all output interactions - values: 0 / 1
# if 1, uses only peak to peak loops for background modeling - corresponds to FitHiChIP(S)
# if 0, uses both peak to peak and peak to nonpeak loops for background modeling - corresponds to FitHiChIP(L)
UseP2PBackgrnd=0

# parameter signifying the type of bias vector - values: 1 / 2
# 1: coverage bias regression   2: ICE bias regression
BiasType=1

# following parameter, if 1, means that merge filtering (corresponding to either FitHiChIP(L+M) or FitHiChIP(S+M))
# depending on the background model, would be employed. Otherwise (if 0), no merge filtering is employed. Default: 1
MergeInt=1

# FDR (q-value) threshold for loop significance
QVALUE=0.01

# File containing chromomosome size values corresponding to the reference genome.
ChrSizeFile=$Gsize

# prefix string of all the output files (Default = 'FitHiChIP').
PREFIX=FitHiChIP

# Binary variable 1/0: if 1, overwrites any existing output file. otherwise (0), does not overwrite any output file.
OverWrite=1

EOF

    script_toLoop_FitHiChIP=HiCProToLoop_FitHiChIP_$SampleID.sh
    echo -e "generating batch script $script_toLoop_FitHiChIP to call 2D loops using FitHiChIP  at $LoopOut_FitHiChIP"
    # generating batch script for calling 2D loops using FitHiChIP
    cat > $script_toLoop_FitHiChIP <<EOF

#!/bin/bash
#BSUB -M 30G
#BSUB -P 3DSE
#BSUB -N
#BSUB -n 4
##BSUB -q hpcf_test   #for now, only this queue works for fithichip
#BSUB -J $SampleID.FitHiChIP.$LowDistThr.$UppDistThr.$IntType
#BSUB -eo $LoopOut_FitHiChIP/$SampleID.$LowDistThr.$UppDistThr.$IntType.e
#BSUB -oo $LoopOut_FitHiChIP/$SampleID.$LowDistThr.$UppDistThr.$IntType.o

module load fithichip/11.0
#bedtools/2.30.0 R/4.0.2-rhel8

cd $LoopOut_FitHiChIP

FitHiChIP_HiCPro.sh -C $config

EOF

    echo -e "Submitting FitHiChIP 2D loop calling batch script: $script_toLoop_FitHiChIP ..."

    start_time="$(date -u +%s.%N)"

    jobidToLoop=$(bsub < $script_toLoop_FitHiChIP | awk '/is submitted/{print substr($2, 2, length($2)-2);}')


    # pauses and waits for the job (calling 2D loops using FitHiChIP ) to finish.

    echo -e "Pause and wait for job $script_toLoop_FitHiChIP with jobid $jobidToLoop to be done ..."
    #set timeout time to 100 hours instread of the default 24 hous (might be)
    bwait -t 6000 -w "done($jobidToLoop)" || fail "job of calling 2D loops from HiCPro result failed! check if memony usage exceed limit!"

    end_time="$(date -u +%s.%N)"

    elapsed="$(bc <<<"$end_time-$start_time")"

    echo -e "2D loop calling FitHiChIP Job finished.."
    echo -e "Total of $elapsed seconds elapsed for 2D loop calling job $script_toLoop_FitHiChIP with jobid $jobidToLoop\n"
else
    echo -e "Detecting 2D Loop calling directory uisng FitHiChIP already exists: $LoopOut_FitHiChIP. Skipping ... \n"

fi
echo -e "$(date)"
echo "################Getting significant loops on user provided FDR threholds by parsing intermediate FitHiChIP output and copy them (.bed.gz) to specified location for visualization by ProteinPaint######################"

    #if  [ ! -s $ProteinPaintPath/${SampleID}.Qvalue.0.05.FitHiChIP.interactions_FitHiC.bed.gz ]

    #then

        #  obtain significant loops on different FDR threholds by parsing intermediate FitHiChIP output and copy them (.bed.gz) to specified location for visualization by ProteinPaint
        if [ $IntType -eq 3 ];then
            LoopDir=$LoopOut_FitHiChIP/FitHiChIP_Peak2ALL_b5000_L${LowDistThr}_U${UppDistThr}/P2PBckgr_0/Coverage_Bias/FitHiC_BiasCorr
        elif [ $IntType -eq 1 ];then
            LoopDir=$LoopOut_FitHiChIP/FitHiChIP_Peak2Peak_b5000_L${LowDistThr}_U${UppDistThr}/Coverage_Bias/FitHiC_BiasCorr
        else
            echo "Error!! IntType must be 1 (Peak2Peak) or 3 (Peak2All)"
            exit;
        fi

        cd $LoopDir

        array=(${LoopThr//,/ }) && count=${#array[@]}

        LoopAll=$LoopDir/FitHiChIP.interactions_FitHiC.bed

        echo -e "Get significant loops on $count FDR threholds: $LoopThr by Parsing file $LoopAll"

        bash $ScriptDir/FitHiChIPToProteinPaint.v1.2.sh $SampleID $LoopAll $LoopThr

        cp $SampleID.Qvalue.*.bed.gz{,.tbi} $ProteinPaintPath
        echo -e "loops for $SampleID is store at $ProteinPaintPath\n"
    #else
    #    echo -e "Detecting files for ProteinPaint is ready at: $ProteinPaintPath. Skipping ... \n"
    #fi
else
    echo -e "Detectining HiC data, skipping steps of 1D peak calling and loop calling exclusive for HiChIP data ...\n"
fi

#=============
# Creating JSON file for contact map (.hic filei for both  HiChIP and HiC), loops (.bedpe.gz) and coverage track (.bw) (for HiChIP only)  visulizatin using ProteinPaint
#=============

echo -e "$(date)"
echo "################Creating JSON file for contact map (.hic file), loops (.bedpe.gz), coverage track (.bw) and loop anchor (.bed) visulizatin using ProteinPaint######################"
if  [ ! $loopAnchor ];then
    JSONFile=$OutDir/$SampleID.$FDR.$refGenome.$IntType.json
else
    JSONFile=$OutDir/$SampleID.$Anchor.$FDR.$refGenome.$IntType.json
fi

if [ ! -s $JSONFile ]
then
    #create JSON file for visulization
    JSONPath=${ProteinPaintPath#/research_jude/rgs01_jude/resgen/legacy/gb_customTracks/tp/}
    if [ $HiC -eq 0 ]
    then
        array=(${LoopThr//,/ })
        temp=${LoopOut_FitHiChIP/*\/LoopOut_FitHiChIP./}
        name=${temp/\/*/}
        echo -e "loop ID: $name"

        cat > $JSONFile <<EOF
[
    {
        "type":"hicstraw",
        "name":"$SampleID.hic",
        "mode_arc":false,
        "mode_hm":true,
        "file":"$JSONPath/$SampleID.$refGenome.hic",
        "enzyme":"MboI"
    },
EOF
        for Qvalue in ${array[@]}
        do
            cat >> $JSONFile <<EOF
    {
        "type": "hicstraw",
        "name": "$SampleID.$Qvalue",
        "mode_arc": true,
        "mode_hm": false,
        "bedfile": "$JSONPath/$SampleID.Qvalue.$Qvalue.$name.bed.gz",
        "enzyme": "MboI"
    },
EOF
        done
        cat >> $JSONFile <<EOF
    {
        "type": "bigwig",
        "name": "$SampleID.Coverage",
        "file": "$JSONPath/$SampleID.$refGenome.bw",
        "scale": {
            "auto": 1
        },
        "height": 50
    },
    {
        "type":"bedj",
        "name":"$SampleID.Anchor",
        "file":"$JSONPath/$SampleID.Anchor.ppt.bed.gz",
        "stackheight":14,
        "stackspace":1
    }

]
EOF
    else
        cat > $JSONFile <<EOF
{
        "type":"hicstraw",
        "name":"$SampleID.hic",
        "mode_arc":false,
        "mode_hm":true,
        "file":"$JSONPath/$SampleID.$refGenome.hic",
        "enzyme":"MboI"
}
EOF
    fi
    echo -e "JSON file for $SampleID is created as $JSONFile\n"
else
    echo -e "Detecting JSON file for ProteinPaint is already generated  at: $JASONFile. Skipping ... \n"
fi

echo -e "########Congratulations! All jobs finished!!######"
